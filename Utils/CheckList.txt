-------------------------------------------------------------------------------------------------------------------------
FILES/FOLDERS
-------------------------------------------------------------------------------------------------------------------------
[ - ] Include guards match file name
[ - ] Class name match file name
[ - ] File name has to be singular, not a plural
[ - ] Core/, Collections/ sub folder names have to be singular
[ X ] hierarchy graph, mark virtual
[ - ] All #endif should have comment
[ X ] Make sure every header file is necessary
[ X ] include order match inheritance order and hierarchy graph
[ X ] include <> paths before “” paths
-------------------------------------------------------------------------------------------------------------------------
VARIABLES
-------------------------------------------------------------------------------------------------------------------------
[ X ] Use auto whenever possible except for basic types
[ X ] global member vars, structs indicated by g_
[ - ] enums indicated by e_
[ X ] local member vars indicated by m_
[ - ] vector names end with s
[ X ] Maps, structs etc. declare with {}
[ - ] Reduce use of macros, use const instead
[ - ] use nullptr for null pointers instead of NULL
[ - ] use VK_NULL_HANDLE instead of nullptr for Vulkan objects
[ X ] static cast instead of C-style cast
[ - ] For loops use matching types for iterator
[ - ] Stack allocate whenever you can instead of heap
[ X ] Pool structs resource will only have Vulkan objects, others could be in meta
[ X ] createInfo and allocInfo used everywhere for consistency
[ X ] populate info structure by reference via local variable at the end
[ X ] ID ordering {model, 
                   image,
                   buffer,
                   renderPass,
                   pipeline,
                   camera,
                   resource,
                   handOff}
-------------------------------------------------------------------------------------------------------------------------
METHODS
-------------------------------------------------------------------------------------------------------------------------
[ X ] Common methods - create, get, ready, destroy
[ X ] Return objects/literals methods start with get
[ X ] Return boolean methods start with is
[ X ] Return via parameter only if returning multiple variables
[ X ] private/public/protected methods are placed appropriately
[ X ] Clean ups should remove entry from pool
[ X ] When deleting resources stored in vectors make sure to clear the vector as well example - frame buffers
[ - ] All vkCmd calls reside in VKCmd
[ X ] Avoid directly passing in vectors as {}
[ X ] Use const and/or reference in function params when passing vectors
[ X ] Use const and/or pointer in function params when passing structs, allows us to pass nullptr
[ X ] some places we pass infoid, some places we pass in dereferenced info parameter - need uniformity 
[ X ] getInfo calls ordering based on id ordering
-------------------------------------------------------------------------------------------------------------------------
LOG
-------------------------------------------------------------------------------------------------------------------------
[ - ] Primary log handle must match class name
[ - ] Check log configs for every file
[ X ] log_info, log_error, log_warning used appropriately
[ - ] log_error followed by runtime error throwing same message
[ X ] In log statements, make sure we are outputting related ids and vars like resourceid, bufferid, imageid etc.
[ X ] In log statements, resource id must come after other ids
[ - ] Check spacing in log statements; no spacing at the end if you are not logging any variables
[ X ] Dump ordering must match relative member orders
[ X ] Go through all log outputs when you run
-------------------------------------------------------------------------------------------------------------------------
MISC
-------------------------------------------------------------------------------------------------------------------------
[ - ] [a-z]< 		                            search all “no space before <”
[ - ] ->[^ ] 			                        search all “no space after ->”
[ - ] [^ ] \(\)  	                            search all “space before ()”
[ - ] [^ ]\([a-z]		                        search all “”no space before (a-z)”
[ - ] [^ ] \[		                            search all “space before [”
[ - ] () { 				                        void parameter
[ - ] [a-z>]&                                   use of references
[ - ] [a-z]\*			                        use of pointers
[ X ] auto          	                        use of auto for vectors, structs etc.
[ - ] const char*                               use const char* for string literals
[ - ] std::string                               use only if you require std::string features like concat, size etc.
[ - ] .size()                                   make sure it is casted from size_t to required types
[ - ] c_str()                                   when passing it to const char* parameter
[ - ] size_t                                    only used for size of an object and in fns that accept size_t
[ - ] std::endl                                 in new line
[ - ] " [", "[ ", " ]", "] ", " [ ", " ] "      spacing around log brackets
-------------------------------------------------------------------------------------------------------------------------
